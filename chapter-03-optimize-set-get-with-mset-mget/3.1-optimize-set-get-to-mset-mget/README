## 3.1 optimize-set-get-to-mset-mget

1. Open 3.1-optimize-set-get-to-mset-mget
$ cd 3.1-optimize-set-get-to-mset-mget

2. Run command to build all code
$ go mod init scalableredis/main
$ go get
$ go build
$ curl -X GET "http://localhost:8080/api"
$ go build -o runtest ./loadtest
$ docker compose up -d

3. Run api and load test
$ ./main
$ ./runtest

+---------+--------+---------+---------+-----------+-----------+---------+
|  STAT   |  50%   |  97.5%  |   99%   |    AVG    |   STDEV   |   MAX   |
+---------+--------+---------+---------+-----------+-----------+---------+
| Latency | 984 ms | 1386 ms | 1440 ms | 946.51 ms | 290.84 ms | 1769 ms |
+---------+--------+---------+---------+-----------+-----------+---------+

+-----------+--------+--------+--------+--------+-------+-------+
|   STAT    |  50%   | 97.5%  |  99%   |  AVG   | STDEV |  MIN  |
+-----------+--------+--------+--------+--------+-------+-------+
| Req/Sec   |     47 |     58 |     58 |  49.80 |  7.74 |    34 |
| Bytes/Sec | 118 kB | 146 kB | 146 kB | 125 kB | 20 kB | 85 kB |
+-----------+--------+--------+--------+--------+-------+-------+

Req/Bytes counts sampled once per second.

498 2xx responses, 0 non 2xx responses.
498 total requests in 10s seconds, 1.3 MB read.
Done!

4. Explain api query direct from database

5. Optimize #1 by cache at data layer 
- Comment api query direct from database
- Uncomment api using cache at data layer

6. Rebuild and run load test
$ <crtl+C> to stop api
$ go build
$ ./main
$ curl -X GET "http://localhost:8080/api"
$ ./runtest

+---------+--------+--------+--------+-----------+----------+--------+
|  STAT   |  50%   | 97.5%  |  99%   |    AVG    |  STDEV   |  MAX   |
+---------+--------+--------+--------+-----------+----------+--------+
| Latency | 130 ms | 165 ms | 591 ms | 138.67 ms | 68.95 ms | 899 ms |
+---------+--------+--------+--------+-----------+----------+--------+

+-----------+--------+--------+--------+--------+--------+--------+
|   STAT    |  50%   | 97.5%  |  99%   |  AVG   | STDEV  |  MIN   |
+-----------+--------+--------+--------+--------+--------+--------+
| Req/Sec   |    376 |    402 |    402 | 357.00 |  69.30 |    151 |
| Bytes/Sec | 944 kB | 1.0 MB | 1.0 MB | 897 kB | 174 kB | 379 kB |
+-----------+--------+--------+--------+--------+--------+--------+

Req/Bytes counts sampled once per second.

3570 2xx responses, 0 non 2xx responses.
4k total requests in 10s seconds, 9.0 MB read.
Done!

7. Explain how data layer cache work

8. Optimize #2 by using MSET and MGET
- Comment api data layer cache
- Uncomment api using MSET and MGET to optimize

9. Rebuild and run load test
$ <crtl+C> to stop api
$ go build
$ ./main
$ curl -X GET "http://localhost:8080/api"
$ ./runtest

+---------+-------+-------+--------+----------+---------+--------+
|  STAT   |  50%  | 97.5% |  99%   |   AVG    |  STDEV  |  MAX   |
+---------+-------+-------+--------+----------+---------+--------+
| Latency | 72 ms | 91 ms | 116 ms | 72.59 ms | 9.25 ms | 123 ms |
+---------+-------+-------+--------+----------+---------+--------+

+-----------+--------+--------+--------+--------+--------+--------+
|   STAT    |  50%   | 97.5%  |  99%   |  AVG   | STDEV  |  MIN   |
+-----------+--------+--------+--------+--------+--------+--------+
| Req/Sec   |    689 |    738 |    738 | 681.70 |  40.86 |    610 |
| Bytes/Sec | 1.7 MB | 1.9 MB | 1.9 MB | 1.7 MB | 103 kB | 1.5 MB |
+-----------+--------+--------+--------+--------+--------+--------+

Req/Bytes counts sampled once per second.

6817 2xx responses, 0 non 2xx responses.
7k total requests in 10s seconds, 17 MB read.
Done!

10. Explain how MSET and MGET has more performance than SET and GET

11. Cleanup workshop
$ <ctrl+C>
$ docker-compose down