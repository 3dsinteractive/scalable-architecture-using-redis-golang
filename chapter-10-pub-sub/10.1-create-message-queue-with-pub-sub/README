## 10.1 create-message-queue-with-pub-sub

1. Open 10.1-create-message-queue-with-pub-sub
$ cd 10.1-create-message-queue-with-pub-sub

2. Run command to build all code
$ go mod init scalableredis/main
$ go get
$ go build
$ go build -o runtest ./loadtest
$ docker compose up -d

3. Run api and load test
$ ./main
$ curl -X POST "http://localhost:8080/register" \
 -H "Content-Type: application/json; charset=UTF-8" \
 -d '{"username":"user_0"}'
$ ./runtest

+---------+-------+--------+--------+----------+----------+---------+
|  STAT   |  50%  | 97.5%  |  99%   |   AVG    |  STDEV   |   MAX   |
+---------+-------+--------+--------+----------+----------+---------+
| Latency | 85 ms | 115 ms | 138 ms | 90.10 ms | 57.33 ms | 1102 ms |
+---------+-------+--------+--------+----------+----------+---------+

+-----------+-------+--------+--------+--------+-------+-------+
|   STAT    |  50%  | 97.5%  |  99%   |  AVG   | STDEV |  MIN  |
+-----------+-------+--------+--------+--------+-------+-------+
| Req/Sec   |   578 |    621 |    637 | 550.83 | 88.64 |   166 |
| Bytes/Sec | 94 kB | 101 kB | 104 kB | 90 kB  | 14 kB | 27 kB |
+-----------+-------+--------+--------+--------+-------+-------+

Req/Bytes counts sampled once per second.

16525 2xx responses, 0 non 2xx responses.
17k total requests in 30s seconds, 2.7 MB read.
Done!

4. Explain pub/sub in redis

5. Cleanup workshop
$ <ctrl+C>
$ docker compose down